class User {
  constructor() {
    // URL de base de l'API, √† configurer selon votre environnement
    this.apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:4000/api';
    // Variable pour suivre l'√©tat de l'affichage du toast de rate limit
    this.rateLimitToastDisplayed = false;
    this.rateLimitToastTimeout = null;
    // Token refresh timer
    this.refreshTokenInterval = null;
    // Derni√®re fois que le token a √©t√© rafra√Æchi
    this.lastTokenRefresh = null;
    // Intervalle de rafra√Æchissement (45 minutes)
    this.refreshInterval = 45 * 60 * 1000;
    // R√©f√©rence aux donn√©es utilisateur en m√©moire (non persistantes)
    this.userDataInMemory = null;
    // R√©f√©rence au socket
    this.socket = null;
    // Callback pour la d√©connexion forc√©e
    this.forceLogoutCallback = null;
    
    // D√©marrer le timer de rafra√Æchissement si un token existe
    this.setupRefreshTokenTimer();
  }

  // Configuration du timer de rafra√Æchissement du token
  setupRefreshTokenTimer() {
    // Nettoyer tout intervalle existant
    if (this.refreshTokenInterval) {
      clearInterval(this.refreshTokenInterval);
    }
    
    // Si l'utilisateur est connect√©
    if (this.isLoggedIn()) {
      // D√©marrer un intervalle pour rafra√Æchir le token
      // Rafra√Æchir toutes les 90 minutes (token expire apr√®s 2h)
      this.refreshTokenInterval = setInterval(async () => {
        try {
          // V√©rifier si le dernier rafra√Æchissement date de moins de 60 minutes
          if (this.lastTokenRefresh && Date.now() - this.lastTokenRefresh < 60 * 60 * 1000) {
            return; // √âviter les rafra√Æchissements trop fr√©quents
          }
          
          console.log('üîÑ Rafra√Æchissement automatique du token...');
          // Rafra√Æchir le token
          await this.refreshToken();
          console.log('‚úÖ Token rafra√Æchi avec succ√®s');
        } catch (error) {
          console.log('‚ùå Erreur lors du rafra√Æchissement automatique:', error.message);
          // Si le rafra√Æchissement √©choue, d√©connecter l'utilisateur seulement si c'est une erreur d'expiration
          if (error.message.includes('invalide') || error.message.includes('expir√©') || error.message.includes('expired')) {
            console.log('üö™ D√©connexion automatique due √† l\'expiration du token');
            this.handleForceLogout('Token refresh failed');
          }
        }
      }, 90 * 60 * 1000); // 90 minutes
    }
  }

  // M√©thode pour rafra√Æchir le token
  async refreshToken() {
    try {
      const response = await fetch(`${this.apiUrl}/auth/refresh-token`, {
        method: 'POST',
        credentials: 'include', // Inclure les cookies
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const error = await response.json();
        // Dispatch event for failed refresh
        window.dispatchEvent(new CustomEvent('token:refresh-failed'));
        throw new Error(error.message || 'Erreur lors du rafra√Æchissement du token');
      }

      const data = await response.json();
      
      // Mise √† jour de la derni√®re fois que le token a √©t√© rafra√Æchi
      this.lastTokenRefresh = Date.now();

      // Dispatch event for successful refresh
      window.dispatchEvent(new CustomEvent('token:refreshed'));

      return data;
    } catch (error) {
      // Dispatch event for failed refresh if not already done
      if (!error.message.includes('Erreur lors du rafra√Æchissement')) {
        window.dispatchEvent(new CustomEvent('token:refresh-failed'));
      }
      throw error;
    }
  }

  // M√©thode pour g√©rer les erreurs de rate limit et autres erreurs HTTP
  handleResponseError(response, data, defaultErrorMessage) {
    // Si c'est une erreur 429 (Too Many Requests)
    if (response.status === 429) {
      // Si un toast de rate limit n'est pas d√©j√† affich√©
      if (!this.rateLimitToastDisplayed) {
        this.rateLimitToastDisplayed = true;
        
        // R√©initialiser l'√©tat apr√®s 5 secondes pour permettre de nouveaux toasts
        clearTimeout(this.rateLimitToastTimeout);
        this.rateLimitToastTimeout = setTimeout(() => {
          this.rateLimitToastDisplayed = false;
        }, 5000);
        
        throw new Error("Trop de tentatives. Veuillez patienter quelques instants avant de r√©essayer.");
      } else {
        // Si un toast est d√©j√† affich√©, lancer une erreur silencieuse (sans message)
        const error = new Error("Rate limit reached");
        error.silent = true; // Marquer l'erreur comme silencieuse
        throw error;
      }
    }
    
    // Pour les autres types d'erreurs
    throw new Error(data.message || defaultErrorMessage);
  }

  // M√©thode pour g√©rer les requ√™tes API avec gestion appropri√©e des r√©ponses non-JSON
  async fetchWithErrorHandling(url, options, defaultErrorMessage) {
    console.log('fetchWithErrorHandling - Called with:', { url, options, defaultErrorMessage });
    
    try {
      console.log('fetchWithErrorHandling - About to call fetch...');
      const response = await fetch(url, options);
      console.log('fetchWithErrorHandling - fetch completed, response:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: response.headers
      });
      
      // Si c'est une erreur 429 (Too Many Requests), elle peut ne pas √™tre au format JSON
      if (response.status === 429) {
        console.log('fetchWithErrorHandling - Rate limit detected');
        // Si un toast de rate limit n'est pas d√©j√† affich√©
        if (!this.rateLimitToastDisplayed) {
          this.rateLimitToastDisplayed = true;
          
          // R√©initialiser l'√©tat apr√®s 5 secondes pour permettre de nouveaux toasts
          clearTimeout(this.rateLimitToastTimeout);
          this.rateLimitToastTimeout = setTimeout(() => {
            this.rateLimitToastDisplayed = false;
          }, 5000);
          
          throw new Error("Trop de tentatives. Veuillez patienter quelques instants avant de r√©essayer.");
        } else {
          // Si un toast est d√©j√† affich√©, lancer une erreur silencieuse
          const error = new Error("Rate limit reached");
          error.silent = true;
          throw error;
        }
      }
      
      // Pour les autres types de r√©ponses, essayer de parser en JSON
      let data;
      try {
        console.log('fetchWithErrorHandling - About to parse response as JSON...');
        data = await response.json();
        console.log('fetchWithErrorHandling - JSON parsed successfully:', data);
      } catch (e) {
        console.log('fetchWithErrorHandling - JSON parsing failed, trying text:', e);
        // Si la r√©ponse n'est pas du JSON valide, utiliser le texte brut si disponible
        const text = await response.text();
        console.log('fetchWithErrorHandling - Text response:', text);
        data = { message: text || defaultErrorMessage };
      }
      
      // Pour les erreurs d'authentification (401, 422, etc.), retourner les donn√©es JSON au lieu de lancer une erreur
      // Cela permet de traiter les messages d'erreur de connexion/inscription
      if (!response.ok) {
        console.log('fetchWithErrorHandling - Response not OK, status:', response.status);
        // Si c'est une erreur d'authentification avec des donn√©es JSON, les retourner
        if (response.status === 401 || response.status === 422 || response.status === 400 || response.status === 403) {
          console.log('fetchWithErrorHandling - Returning auth error data:', data);
          return data;
        }
        // Pour les autres erreurs (500, etc.), lancer une erreur
        console.log('fetchWithErrorHandling - Throwing error for status:', response.status);
        throw new Error(data.message || defaultErrorMessage);
      }
      
      console.log('fetchWithErrorHandling - Success, returning data:', data);
      return data;
    } catch (error) {
      console.log('fetchWithErrorHandling - Exception caught:', error);
      // Propager l'erreur
      throw error;
    }
  }

  // M√©thode d'inscription
  async register(userData) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/register`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(userData),
          credentials: 'include'
        },
        'Erreur lors de l\'inscription'
      );
      
      // Ne pas stocker les donn√©es utilisateur retourn√©es
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode de connexion
  async login(credentials) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/login`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(credentials),
          credentials: 'include'
        },
        'Erreur lors de la connexion'
      );
      
      // V√©rifier si l'erreur est due √† un compte non v√©rifi√©
      if (data && !data.success && data.message && (
          data.message.includes("non v√©rifi") || 
          data.message.includes("email non v√©rifi") || 
          data.message.includes("verifi") ||
          data.message.includes("verification") ||
          data.message.toLowerCase().includes("email not verified") ||
          data.message.toLowerCase().includes("verify your email") ||
          data.message.includes("v√©rifier votre email") ||
          data.message.includes("Veuillez v√©rifier votre email")
      )) {
        // Retourner un objet avec requiresVerification √† true et l'email
        return { 
          requiresVerification: true, 
          email: credentials.email,
          success: false,
          message: data.message || "Veuillez v√©rifier votre email avant de vous connecter"
        };
      }
      
      // Si la connexion r√©ussit, configurer le timer pour rafra√Æchir le token
      if (data && data.success) {
        // Stocker les informations utilisateur en m√©moire uniquement, pas dans localStorage
        if (data.user) {
          this.userDataInMemory = data.user;
        }
        
        // Configurer le timer pour rafra√Æchir le token
        this.setupRefreshTokenTimer();
        this.lastTokenRefresh = Date.now();
      }
      
      return data;
    } catch (error) {
      
      // V√©rifier si l'erreur contient un message de v√©rification d'email
      if (error.message && (
          error.message.includes("non v√©rifi") || 
          error.message.includes("email non v√©rifi") || 
          error.message.includes("verifi") ||
          error.message.includes("verification") ||
          error.message.toLowerCase().includes("email not verified") ||
          error.message.toLowerCase().includes("verify your email") ||
          error.message.includes("v√©rifier votre email") ||
          error.message.includes("Veuillez v√©rifier votre email")
      )) {
        // Retourner un objet avec requiresVerification √† true au lieu de lancer l'erreur
        return { 
          requiresVerification: true, 
          email: credentials.email,
          success: false,
          message: error.message
        };
      }
      
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode de d√©connexion
  async logout() {
    try {
      // Nettoyer l'intervalle de rafra√Æchissement du token
      if (this.refreshTokenInterval) {
        clearInterval(this.refreshTokenInterval);
        this.refreshTokenInterval = null;
      }
      
      // Nettoyer les donn√©es utilisateur en m√©moire
      this.userDataInMemory = null;
      
      // Appeler l'API pour invalider les cookies c√¥t√© serveur
      await fetch(`${this.apiUrl}/auth/logout`, {
        method: 'POST',
        credentials: 'include'
      }).catch(err => {
        // Continuer m√™me en cas d'erreur
      });
      
      // D√©tacher l'√©coute des √©v√©nements socket si n√©cessaire
      this.detachSocketListeners();
      
      return { success: true, message: 'D√©connexion r√©ussie' };
    } catch (error) {
      // Nettoyer les donn√©es en m√©moire m√™me en cas d'erreur
      this.userDataInMemory = null;
      return { success: true, message: 'D√©connexion locale r√©ussie' };
    }
  }

  // M√©thode pour v√©rifier si l'utilisateur est connect√©
  isLoggedIn() {
    // On se fie uniquement √† la pr√©sence des cookies qui sont automatiquement envoy√©s
    // avec les requ√™tes, donc on ne peut le v√©rifier qu'en faisant une requ√™te API
    // On pourrait potentiellement utiliser document.cookie pour v√©rifier si le cookie existe
    // mais c'est peu fiable car les cookies HttpOnly ne sont pas visibles
    // On utilise donc cette m√©thode comme un compl√©ment √† getMe() qui fait la vraie v√©rification
    return this.userDataInMemory !== null;
  }

  // M√©thode pour obtenir l'utilisateur actuel depuis la m√©moire
  getCurrentUser() {
    return this.userDataInMemory;
  }

  // M√©thode pour v√©rifier l'email
  async verifyEmail(email, code) {
    console.log('User.verifyEmail - Method called with:', { email, code });
    console.log('User.verifyEmail - API URL will be:', `${this.apiUrl}/auth/verify-email`);
    
    try {
      console.log('User.verifyEmail - About to call fetchWithErrorHandling...');
      
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/verify-email`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, code }),
          credentials: 'include'
        },
        'Erreur lors de la v√©rification de l\'email'
      );
      
      console.log('User.verifyEmail - fetchWithErrorHandling returned:', data);
      return data;
    } catch (error) {
      console.log('User.verifyEmail - Error caught:', error);
      if (error.silent) {
        console.log('User.verifyEmail - Error is silent, returning silent response');
        return { success: false, silent: true };
      }
      console.log('User.verifyEmail - Throwing error:', error);
      throw error;
    }
  }

  // M√©thode pour renvoyer le code de v√©rification
  async resendVerification(email) {
    console.log('User.resendVerification - Method called with email:', email);
    console.log('User.resendVerification - API URL will be:', `${this.apiUrl}/auth/resend-verification`);
    
    try {
      console.log('User.resendVerification - About to call fetchWithErrorHandling...');
      
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/resend-verification`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email }),
          credentials: 'include'
        },
        'Erreur lors du renvoi du code de v√©rification'
      );
      
      console.log('User.resendVerification - fetchWithErrorHandling returned:', data);
      return data;
    } catch (error) {
      console.log('User.resendVerification - Error caught:', error);
      if (error.silent) {
        console.log('User.resendVerification - Error is silent, returning silent response');
        return { success: false, silent: true };
      }
      console.log('User.resendVerification - Throwing error:', error);
      throw error;
    }
  }

  // M√©thode pour la demande de r√©initialisation de mot de passe
  async forgotPassword(email) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/forgot-password`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email }),
          credentials: 'include'
        },
        'Erreur lors de la demande de r√©initialisation'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour r√©initialiser le mot de passe
  async resetPassword(code, password) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/reset-password`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ code, password }),
          credentials: 'include'
        },
        'Erreur lors de la r√©initialisation du mot de passe'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour r√©cup√©rer les informations de l'utilisateur connect√©
  async getMe() {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/me`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include'
        },
        'Erreur lors de la r√©cup√©ration des informations utilisateur'
      );
      
      // Mettre √† jour les informations utilisateur uniquement en m√©moire
      if (data.user) {
        this.userDataInMemory = data.user;
      } else {
        this.userDataInMemory = null;
      }
      
      return data;
    } catch (error) {
      if (error.status === 401) {
        // Si non authentifi√©, r√©initialiser les donn√©es utilisateur
        this.userDataInMemory = null;
      }
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour v√©rifier la validit√© d'un token de r√©initialisation
  async checkResetToken(code) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/check-reset-token?code=${code}`,
        {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include'
        },
        'Erreur lors de la v√©rification du token'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour r√©cup√©rer les informations de l'utilisateur connect√© en temps r√©el
  async getRealtimeInfo() {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/me/realtime`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include'
        },
        'Erreur lors de la r√©cup√©ration des informations utilisateur en temps r√©el'
      );
      
      // Mettre √† jour les informations utilisateur uniquement en m√©moire
      if (data.user) {
        this.userDataInMemory = data.user;
      } else {
        this.userDataInMemory = null;
      }
      
      return data;
    } catch (error) {
      if (error.status === 401) {
        // Si non authentifi√©, r√©initialiser les donn√©es utilisateur
        this.userDataInMemory = null;
      }
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour se d√©connecter de toutes les sessions actives
  async logoutAllSessions() {
    try {
      // Nettoyer l'intervalle de rafra√Æchissement du token
      if (this.refreshTokenInterval) {
        clearInterval(this.refreshTokenInterval);
        this.refreshTokenInterval = null;
      }
      
      // Nettoyer les donn√©es utilisateur en m√©moire
      this.userDataInMemory = null;
      
      // Appeler l'API pour d√©connecter toutes les sessions
      await fetch(`${this.apiUrl}/auth/logout-all-sessions`, {
        method: 'POST',
        credentials: 'include'
      }).catch(err => {
        // Continuer m√™me en cas d'erreur
      });
      
      // D√©tacher l'√©coute des √©v√©nements socket si n√©cessaire
      this.detachSocketListeners();
      
      return { success: true, message: 'D√©connexion de toutes les sessions r√©ussie' };
    } catch (error) {
      // Nettoyer les donn√©es en m√©moire m√™me en cas d'erreur
      this.userDataInMemory = null;
      return { success: true, message: 'D√©connexion locale r√©ussie' };
    }
  }

  // Configurer l'√©coute des √©v√©nements socket
  setupSocketListeners(socket, callback) {
    // Stocker la r√©f√©rence au socket
    this.socket = socket;
    
    // Enregistrer le callback de d√©connexion forc√©e
    if (callback && typeof callback === 'function') {
      this.forceLogoutCallback = callback;
    }
    
    if (!this.socket) {
      return false;
    }
    
    // √âcouter l'√©v√©nement de d√©connexion forc√©e
    this.socket.on('forceLogout', (data) => {
      
      // Nettoyer les donn√©es et cookies locaux
      this.handleForceLogout(data.reason || 'Session expir√©e');
    });
    
    // √âcouter l'√©v√©nement d'expiration de token de r√©initialisation
    this.socket.on('passwordResetTokenExpired', (data) => {
      // Vous pouvez g√©rer cet √©v√©nement si n√©cessaire
    });
    
    // √âcouter les mises √† jour des informations utilisateur en temps r√©el
    this.socket.on('userInfoUpdate', (data) => {
      
      // Mettre √† jour les donn√©es utilisateur en m√©moire
      if (data.user) {
        this.userDataInMemory = data.user;
        
        // D√©clencher un √©v√©nement personnalis√© pour informer les composants de la mise √† jour
        window.dispatchEvent(new CustomEvent('userInfoUpdate', { detail: data.user }));
      }
    });
    
    // Authentifier le socket avec l'ID utilisateur
    if (this.userDataInMemory && this.userDataInMemory.id) {
      this.socket.emit('authenticate', this.userDataInMemory.id);
    }
    
    return true;
  }
  
  // D√©tacher les √©couteurs d'√©v√©nements socket
  detachSocketListeners() {
    if (this.socket) {
      this.socket.off('forceLogout');
      this.socket.off('passwordResetTokenExpired');
      this.socket.off('userInfoUpdate');
      this.socket = null;
    }
    
    this.forceLogoutCallback = null;
  }
  
  // G√©rer la d√©connexion forc√©e
  handleForceLogout(reason) {
    // Nettoyer l'intervalle de rafra√Æchissement du token
    if (this.refreshTokenInterval) {
      clearInterval(this.refreshTokenInterval);
      this.refreshTokenInterval = null;
    }
    
    // Nettoyer les donn√©es utilisateur en m√©moire
    this.userDataInMemory = null;
    
    // Appeler le callback de d√©connexion forc√©e si d√©fini
    if (this.forceLogoutCallback && typeof this.forceLogoutCallback === 'function') {
      this.forceLogoutCallback(reason);
    }
  }

  // M√©thode pour v√©rifier le mot de passe actuel
  async checkPassword(password) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/auth/check-password`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password }),
          credentials: 'include'
        },
        'Erreur lors de la v√©rification du mot de passe'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour mettre √† jour le mot de passe
  async updatePassword(passwordData) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/user/password`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(passwordData),
          credentials: 'include'
        },
        'Erreur lors de la mise √† jour du mot de passe'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour mettre √† jour le nom d'utilisateur
  async updateUsername(username) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/user/username`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username }),
          credentials: 'include'
        },
        'Erreur lors de la mise √† jour du nom d\'utilisateur'
      );
      
      // Mettre √† jour les donn√©es utilisateur en m√©moire
      if (data.success && this.userDataInMemory) {
        this.userDataInMemory.username = username;
      }
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour mettre √† jour l'email (lance le processus de v√©rification)
  async updateEmail(email) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/user/email`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email }),
          credentials: 'include'
        },
        'Erreur lors de la mise √† jour de l\'email'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour v√©rifier le code de changement d'email
  async verifyEmailChange(verificationCode) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/user/email/verify`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ verificationCode }),
          credentials: 'include'
        },
        'Erreur lors de la v√©rification du changement d\'email'
      );
      
      // Mettre √† jour les donn√©es utilisateur en m√©moire
      if (data.success && data.email && this.userDataInMemory) {
        this.userDataInMemory.email = data.email;
      }
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }

  // M√©thode pour v√©rifier si un email est disponible
  async checkEmailAvailability(email) {
    try {
      const data = await this.fetchWithErrorHandling(
        `${this.apiUrl}/user/check-email`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email }),
          credentials: 'include'
        },
        'Erreur lors de la v√©rification de la disponibilit√© de l\'email'
      );
      
      return data;
    } catch (error) {
      if (error.silent) return { success: false, silent: true };
      throw error;
    }
  }
}

export default new User();
