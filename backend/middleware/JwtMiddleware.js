const jwt = require('jsonwebtoken');
const Profile = require('../models/Profile');

class JwtMiddleware {
  constructor() {
    this.secretKey = process.env.JWT_SECRET || 'votre_cl√©_secr√®te_jwt'; // Utiliser la variable d'environnement si elle existe
    this.refreshSecretKey = process.env.JWT_REFRESH_SECRET || 'votre_cl√©_secr√®te_refresh'; // Cl√© pour les refresh tokens
    this.expiresIn = process.env.JWT_EXPIRES_IN || '2h'; // Utiliser la variable d'environnement si elle existe (√©tendu √† 2h)
    this.refreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d'; // Dur√©e de vie des refresh tokens
  }

  // M√©thode pour v√©rifier le token
  authenticateToken() {
    return async (req, res, next) => {
      console.log('üîê Middleware JWT: V√©rification du token...');
      console.log('üìã Headers disponibles:', Object.keys(req.headers));
      console.log('üç™ Cookies disponibles:', Object.keys(req.cookies || {}));
      
      // R√©cup√©rer le token du cookie ou du header
      const token = req.cookies.access_token || req.headers['authorization']?.split(' ')[1];
      
      if (!token) {
        console.log('‚ùå Middleware JWT: Aucun token trouv√©.');
        console.log('üîç Cookie access_token:', req.cookies.access_token ? 'pr√©sent' : 'absent');
        console.log('üîç Header Authorization:', req.headers['authorization'] ? 'pr√©sent' : 'absent');
        return res.status(401).json({ message: 'Acc√®s non autoris√©. Token requis.' });
      }

      console.log('‚úÖ Token trouv√©, v√©rification en cours...');
      
      jwt.verify(token, this.secretKey, async (err, user) => {
        if (err) {
          console.log('‚ùå Middleware JWT: Token invalide.', err.message);
          
          // Si le token est expir√©, tenter de le rafra√Æchir automatiquement
          if (err.name === 'TokenExpiredError') {
            console.log('üîÑ Token expir√©, tentative de rafra√Æchissement automatique...');
            
            const refreshToken = req.cookies.refresh_token;
            if (refreshToken) {
              try {
                // V√©rifier le refresh token
                const decoded = this.verifyRefreshToken(refreshToken);
                
                // R√©cup√©rer l'utilisateur
                const User = require('../models/User');
                const refreshedUser = await User.getUserById(decoded.id);
                
                if (refreshedUser) {
                  // R√©cup√©rer les r√¥les
                  const roles = await Profile.getUserRoles(refreshedUser.id);
                  
                  // G√©n√©rer un nouveau token
                  const newToken = this.generateToken({
                    id: refreshedUser.id,
                    email: refreshedUser.email,
                    roles
                  });
                  
                  // Mettre √† jour le cookie
                  const cookieOptions = {
                    httpOnly: true,
                    secure: process.env.NODE_ENV === 'production',
                    sameSite: 'strict',
                    maxAge: 24 * 60 * 60 * 1000 // 1 jour
                  };
                  
                  res.cookie('access_token', newToken, cookieOptions);
                  
                  // Ajouter les informations utilisateur √† la requ√™te
                  req.user = {
                    id: refreshedUser.id,
                    email: refreshedUser.email,
                    roles
                  };
                  
                  console.log('‚úÖ Token rafra√Æchi automatiquement pour user:', refreshedUser.id);
                  return next();
                }
              } catch (refreshError) {
                console.log('‚ùå Erreur lors du rafra√Æchissement automatique:', refreshError.message);
              }
            }
          }
          
          return res.status(403).json({ message: 'Token invalide ou expir√©.' });
        }
        
        console.log('‚úÖ Token valide, v√©rification des r√¥les pour user ID:', user.id);
        
        // V√©rifier si l'utilisateur a au moins un r√¥le
        try {
          const User = require('../models/User'); // Importer ici pour √©viter les d√©pendances circulaires
          const roles = await Profile.getUserRoles(user.id);
          
          console.log('üé≠ R√¥les r√©cup√©r√©s pour user', user.id, ':', roles);
          
          if (!roles || roles.length === 0) {
            console.log('‚ùå Utilisateur sans r√¥le. User ID:', user.id);
            return res.status(403).json({ message: 'Utilisateur sans r√¥le. Acc√®s refus√©.' });
          }
          
          // Ajouter les r√¥les √† l'objet user dans la requ√™te
          user.roles = roles;
          req.user = user;
          console.log('‚úÖ Authentification r√©ussie pour user:', user.id, 'avec r√¥les:', roles);
          next();
        } catch (error) {
          console.error('üí• Erreur lors de la v√©rification des r√¥les:', error);
          return res.status(500).json({ message: 'Erreur lors de la v√©rification des droits d\'acc√®s.' });
        }
      });
    };
  }

  // M√©thode pour g√©n√©rer un token d'acc√®s
  generateToken(user) {
    console.log('Middleware JWT: G√©n√©ration de token pour l\'utilisateur', user.id);
    return jwt.sign(user, this.secretKey, { expiresIn: this.expiresIn });
  }

  // M√©thode pour g√©n√©rer un refresh token
  generateRefreshToken(user) {
    console.log('Middleware JWT: G√©n√©ration de refresh token pour l\'utilisateur', user.id);
    return jwt.sign(user, this.refreshSecretKey, { expiresIn: this.refreshExpiresIn });
  }

  // M√©thode pour v√©rifier un refresh token
  verifyRefreshToken(token) {
    return jwt.verify(token, this.refreshSecretKey);
  }

  // M√©thode pour changer la cl√© secr√®te
  setSecretKey(newSecretKey) {
    this.secretKey = newSecretKey;
  }

  // M√©thode pour changer la dur√©e de validit√© du token
  setExpiresIn(newExpiresIn) {
    this.expiresIn = newExpiresIn;
  }
}

module.exports = new JwtMiddleware();